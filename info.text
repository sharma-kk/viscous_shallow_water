#########test0.py#######
Configuration: Model 3
y0 = 4/35 ; y1 = 31/35
alpha = 1.14
mesh: 464x128
Lx = 5; Ly = 1 (after non-dimensionalization)
initial veloctiy: similar to Galewsky test case
unperturbed height, h0: geostrophic height
height after perturbation: 1 + h0 + 0.01*cos(math.pi*y/2)*exp(-4*(x  - 2.5)**2)*exp(-81*(y - 0.5)**2)
u/h: P1/P1 "CG"
Ro = 0.29 ; Re = 4*10**5 ; B = 2.4 ; C = 0.06 ; Pe = 4*10**5
Solution stored in ./results/test.pvd file
made changes in meridional flow; included a factor of alpha

##########test1.py#######
Configuration: Model 1
y0 = 1/14 ; y1 = 13/14
alpha = 1
mesh: 448x64
Dt : 0.02
We run the model starting from peturbed height
u/h: P1/P1 "CG"
Ro = 10^-1; B = 0 (no Coriolis force variation); C = 10^-2; Re = Pe = 10^3
initial veloctiy: similar to Galewsky test case
unperturbed height, h0: geostrophic height
perturbed height: 1 + h0 + 0.01*cos(math.pi*y/2)*exp(-15*(x  - 3.5)**2)*exp(-3*(y - 0.5)**2)
Solution stored in ./results/rsw1.pvd file
Observations: The solution looks similar to Galewsky test case results. The initial
pertubation was quite high (i did some mistake in calculations).

##########test2.py#######
Configuration: Model 1
y0 = 1/14 ; y1 = 13/14
alpha = 1
mesh: 448x64
Dt : 0.02
We run the model starting from peturbed height
u/h: P1/P1 "CG"
Ro = 10^-1; B = 1 (Coriolis force varies with y); C = 10^-2; Re = Pe = 10^3
initial veloctiy: similar to Galewsky test case
unperturbed height, h0: geostrophic height
perturbed height: 1 + h0 + 0.01*cos(math.pi*y/2)*exp(-4*(x  - 3.5)**2)*exp(-81*(y - 0.5)**2)
Solution stored in ./results/rsw2.pvd file
Ran for 500 time steps
Observations: The solution remained geostrophic for long time. I think this was because of low resolution
and not high enough Re/Pe

##########test3.py#######
Configuration: Model 1
y0 = 1/14 ; y1 = 13/14
alpha = 1
mesh: 448x64
Dt : 0.02
We run the model starting from peturbed height
u/h: P1/P1 "CG"
Ro = 10^-1; B = 1 (Coriolis force varies with y); C = 10^-2; Re = Pe = 10^5
initial veloctiy: similar to Galewsky test case
unperturbed height, h0: geostrophic height
perturbed height: 1 + h0 + 0.01*cos(math.pi*y/2)*exp(-4*(x  - 3.5)**2)*exp(-81*(y - 0.5)**2)
Solution stored in ./results/rsw3.pvd file
Ran for 600 time-steps, printing every 10 tsteps
Observations: The solution evolved to complex scales. The solution looks similar to Galewsky test case results.
Ran again, this time for 930 time-steps/ 251 hours. Printing every 30 timesteps/ 8 hours

##########test4.py#######
Configuration: Model 1
y0 = 1/14 ; y1 = 13/14
alpha = 1
file is in ./parallel_run
We ran this test on multiple cores (4)
mesh: 896x128
Dt : 0.02
We run the model starting from peturbed height
u/h: P1/P1 "CG"
Ro = 10^-1; B = 1 (Coriolis force varies with y); C = 10^-2; Re = Pe = 10^5
initial veloctiy: similar to Galewsky test case
unperturbed height, h0: geostrophic height
perturbed height: 1 + h0 + 0.01*cos(math.pi*y/2)*exp(-4*(x  - 3.5)**2)*exp(-81*(y - 0.5)**2)
Solution stored in ./results/rsw4.pvd file
Ran for 600 time-steps
Observations: Results similar to test2 but the field were smoother (obviously). I think i can get 
results very similar to galewsky if i increase L_x but then beta-plane approximation maynot make sense.

##########test5.py#######
Configuration: Model 1
y0 = 1/14 ; y1 = 13/14
alpha = 1
I observed some jumps in the height field at the top and bottom boundaries. 
I think there was a mistake in the weak formulation used 
in the previous tests. I am now running with updated
weak formulation. 
The test configuration is same as test3.py except a change 
in the weak formulation.
Observations: I didn't see any change in the simulation results
The height still jumps at the top and bottom boundaries.
Maybe it's alright if it jumps. I should ask Peter about it.
After thinking about it, i found out that both weak formulations are same. 

##########test6.py#######
Configuration: Model 2
y0 = 11/49 ; y1 = 38/49
alpha = 0.82
file is in ./parallel_run
We ran this test on multiple cores (4)
mesh: 448x128 (size: 3.5x1)
y0 = 11/49 ; y1 = 38/49
Dt: 0.01
Ro = 0.4; B = 6.9; Re = Pe = 6*10^5; L_y = 7782 km
simulating flow on earth from 10 degree latitude to 80 degree latitude
Weak formulation same as test4.py
Ran for 600 time steps # roughly 162 hours (6.75 days)of real time
I ran the model again after introducing alpha factor in initial velocity
this time I ran for 550 time steps
other changes: B = 6.93

##########test7.py#######
Configuration: Model 1
y0 = 1/14 ; y1 = 13/14
alpha = 1
Ro = 0.3 ; Re = 3*10**5 ; B = 1.1 ; C = 0.06 ; Pe = 3*10**5
We are not adding pertubation to the height field
We want to see how long the flow remains geostrophic. 
We have added some viscosity so we don't know how long the flow can sustain geostrophic conditions.
We running the model with configuratin same as test3.py
We are running for 450 time steps which corresponds to 120 hours
We did some more changes in the parameters in comparison to test3
We are taking more accurate non-dimensional parameters this time. 
Observation: The geostrophic balance hold for 120 hours.

##########test8.py#######
Configuration: Model 1
y0 = 1/14 ; y1 = 13/14
alpha = 1.64
Same as test3.py but with more accurate parameters
Ro = 0.3 ; Re = 3*10**5 ; B = 1.1 ; C = 0.06 ; Pe = 3*10**5
Observation: upto time = 120 hours the solution looks pretty close to Galewsky test problem results
Ran the model again after introduction alpha factor in the initial velocity
Changes: ran for 720 time steps, B = 1.17, added code to print KE
Observations: The flow looks complex after long time. The max vel. remains close to 1. The KE remains almost constant.
changes: ran for 930 time steps
Observations: I see vortices getting stabilized after long time. KE reduces a bit.
Changes: ran for 2790 time steps. Interrupted the sim in the middle. at t=40.8 (~ 23 days)

##########test9.py#######
Configuration: Model 3
y0 = 4/35 ; y1 = 31/35
alpha = 1.14
location: ./parallel_run
we ran the test on 4 cores
our domain covers 50 degree longitude area of earth (from 20 degree latitude to 70 degree latitude)
Ro = 0.29 ; Re = 4*10**5 ; B = 2.4 ; C = 0.06 ; Pe = 4*10**5
Ny = 128 # resolution 43 km
Nx = 5*Ny
Dt =0.02 # roughly 23 minutes
Ran for 370 time steps (equivalent to ~ 143 hours)
Observation: The flow looks similar to Galewsky test case with diffusion.
In our test nu = 10^3
Now running again for 760 time steps which corresponds to 145 hours(with Dt = 0.01), included a factor of alpha in zonal veloctiy
also mointoring instantaneous height minus balanced height

############test10.py##########
Configuration: Model 3
y0 = 4/35 ; y1 = 31/35
alpha = 1.14
testing geostrophic balance for test9
Ran upto t = 7.5 ~ 144 hours

############test11.py###########
Configuration: Model 2
y0 = 11/49 ; y1 = 38/49
alpha = 0.82
ran on 4 cores
i took the script of test6 and ran for higher Re and Pe
Re = Pe = 10^7
made changes in number of time steps
Observation: The solution converged. I didn't see much change in the solution.
I think i should instead run with higher resolution to see what happens.
I changed the resoultion. 
Nx = 2*448
Ny = 2*128 
Running on the university's server. The files are saved in bax2322 folder
Observation: The values of vorticity and the structure remained the same. The vorticity
field looked smoother.

###########test12.py###########
Configuration: Model 2
y0 = 11/49 ; y1 = 38/49
alpha = 0.82
Ran on 4 cores (not sure)
Ran model with increased diffusion. nu = 10^5.
This assumption leads to decrease in Reynolds no.
We take the model config in test6 and make suitable changes.
Re = Pe = 6*10**3
observation: I see results similar to Galewsky paper

############test13.py###########
Configuration: Model 2
y0 = 11/49 ; y1 = 38/49
alpha = 0.82
Ran on multiple cores
removed viscous terms from both velocity and height equations
kept the same FE spaces
running the model config from test6
Observation: THe model runs and results look similar to Galewsky test case.

############test14.py###########
Configuration: Model 2
y0 = 11/49 ; y1 = 38/49
alpha = 0.82
ran the test6 configuration on coarse grid
Nx = 112
Ny = 32
Observation: The solution converged. The vel field looked less smoother in comparison to fine grid.

############test15.py###########
Configuration: Model 2
y0 = 11/49 ; y1 = 38/49
alpha = 0.82
ran the test6 configuration on coarse grid
Nx = 112
Ny = 32
Changed the FE spaces to P2/P1
projecting vorticiy of DG of degree 1 space. Earlier it was DG 0.
Observations: The solution diverged at t=1.2. There were lot of oscillations in the velocity field.

############test16.py###########
Configuration: Model 2
y0 = 11/49 ; y1 = 38/49
alpha = 0.82
configuration same as test15.py except running on fine grid
Nx = 224
Ny = 64
Observation: The solution diverged again at t = 1.5. Lot of oscillation in the vel. field.

###########test17.py###########
Configuration: Model 1
y0 = 1/14 ; y1 = 13/14
alpha = 1.64
Config same as test8.py but with high res.
Ran this code on uni server on 8 cores. Didn't see much improvement when run on 16 cores. 16 min vs 13 min for 60 time steps.
Nx = 256*7
Ny = 256
Dt = 0.01
Ran for 2880 time-steps (16 days). The plots look beautiful.
Running again, this time for 30 days. I tooke ~ 26 hours to complete the run.
Looking at the partial results i feel that
i can increase the time step size for fine-grid. I should do the same run with big timestep and
compare the results.

###########test18.py###########
Ran test17 configuration but this time with twice the time-step size (Dt = 0.02).
Ran on 8 cores on the uni's server. 
Running time: 30 days
Observation: It took ~15 hours to complete the run. The kinetic remains almost similar until 16 days. After that i changes a bit but not by much.
The vorticity and velocity plots look different after long time.
I have feeling that for Re = 10**5, the spatial resolution still needs to be higher and time step should be even smaller. 

##########test19.py###########
Model 1 configuration
Assuming constant Coriolis parameter (f-plane approximation)
Observations: I could see complex flow structures emerging even with constant Coriolis parameter.
I interrupted the simulation at t = 21.6.

##########test20.py###########
Model 1 configuration
Height written as advection-diffusion
I changed the weak formulation. I kept only the advection term in the height equation.
Observation: The simulation exploded at after t =0.6. I don't know why that happend.
Maybe because of P1/P1 FE.

##########test21.py###########
Model 1 configuation.
Height written as advection-diffusion
Weak formulation same as test19
Changed FE space to P2/P1
Observation: The solution diverged even before t = 0.6. I think there is a problem in the 
way I am writing the weak formulation maybe.

###########test22.py##########
Model 1 configuration
Height written as advection-diffusion
I changed the weak formulation and wrote it differently. 
P1/P1 FE spaces
Observation: The solution diverged after t = 0.6.

###########test23.py##########
Model 1 config
constant corilis parameter
Reducing Re, Pe
Re = Pe = 3*10**3
Obsservation: The spatial resolution was enough to resolve all scales created at Re ~ 10**3.

###########test24.py##########
Running on uni server on 8 cores
Model 1 config
Ny = 256
constant corilis parameter
Reducing Re, Pe
Re = Pe = 3*10**3
Observation: The result looks very similar to test23 which was run on a coarse grid.
I interrupted the run at t = 33.0